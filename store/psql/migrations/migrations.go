// Code generated by go-bindata.
// sources:
// migrations/001_service_table.down.sql
// migrations/001_service_table.up.sql
// migrations/002_dentry_table.down.sql
// migrations/002_dentry_table.up.sql
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __001_service_tableDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd7\xe2\x52\xd0\x52\x70\x29\xca\x2f\x50\x28\x4e\x2d\x2a\xcb\x4c\x4e\x55\x08\x49\x4c\xca\x49\xe5\x52\xd0\xd2\xe7\xe2\xd2\xd5\x55\xd0\xc5\x04\x20\x61\x54\x2d\x25\x60\x2d\x38\x54\xbb\x04\xf9\x07\x28\x84\x38\x3a\xf9\xb8\x2a\x14\x94\x26\xe5\x64\x26\xeb\x41\xb5\x59\x73\x01\x02\x00\x00\xff\xff\x9b\x8b\xb5\xe2\x7e\x00\x00\x00")

func _001_service_tableDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__001_service_tableDownSql,
		"001_service_table.down.sql",
	)
}

func _001_service_tableDownSql() (*asset, error) {
	bytes, err := _001_service_tableDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "001_service_table.down.sql", size: 126, mode: os.FileMode(420), modTime: time.Unix(1516905169, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __001_service_tableUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x93\x41\x6f\xd3\x30\x1c\xc5\xef\xf9\x14\x4f\xbe\x2c\xa9\xd6\x4d\x20\x0e\x68\x13\x87\xd0\xba\x60\x51\x1c\x68\x1c\xd1\x9d\x22\x37\xf9\x33\x2c\xda\x24\xd8\x4e\xa9\xf6\xe9\x51\xb2\xb6\xca\x98\x58\x7b\x20\xc7\xf8\xbd\x5f\x9e\x9f\x5e\xae\x47\x01\x46\x98\x58\xd2\x9e\xe0\xc8\x6e\x4d\x41\x50\x7a\xb5\xa6\x00\xa3\xeb\x20\x18\x8f\x31\x7e\xe1\xe9\xce\xc1\x2b\xd7\x5a\x42\xdb\x9a\x72\x5c\x3b\xd7\xc0\x38\x50\xd5\x31\xca\x93\xfe\xc9\x82\xc7\x8a\x83\x2f\x15\x97\xa9\x48\x24\xc4\x0c\x32\x51\xe0\x4b\x91\xaa\x14\xec\x08\x65\xb7\xe7\x85\xe9\xb3\xc3\x79\xdb\x16\xbe\x4b\xf5\xbd\xb6\x87\x7b\x9d\x1b\x46\xc5\xef\xe7\x1c\x4d\xbb\x5a\x9b\xe2\x6a\xef\x0d\x03\x00\x60\xa6\x64\xfd\x3d\xfb\x8c\x32\x9b\xcf\x31\xe5\xb3\x38\x9b\xab\xfe\x6d\x7e\x4f\x15\x59\xed\x29\xdf\xbe\x09\xa3\xcb\x47\x4b\xd1\x77\x9b\x97\xda\x13\x83\x37\x1b\x72\x5e\x6f\x1a\xff\xf0\x1c\xd1\x1d\x3e\xd4\x15\x85\x17\x99\x9a\x5c\xdc\xdc\x78\xda\xf9\x4b\x54\xf5\xef\x30\x3a\xc0\xda\xa6\xfc\x7f\xb0\x75\x7d\x6f\x0a\xbd\xce\x2b\xbd\x21\x86\xad\xb6\xc5\x0f\x6d\xc3\x57\xaf\xdf\x46\x47\xdc\x5e\xd9\x29\x5c\xa3\x8b\x13\xb2\x92\x5c\x61\x4d\xe3\x4d\x5d\x31\x74\x1f\xfc\x4b\x30\x49\x64\xaa\x16\xb1\x90\x0a\xac\xf9\x99\xef\xab\x65\xf8\xb2\x10\x9f\xe3\xc5\x1d\x3e\xf1\x3b\x84\x5d\xc7\xd1\x73\x7d\xfb\xeb\xa0\xcf\x9f\xe6\xce\xa4\xf8\x9a\xf1\xf0\xe9\x6d\xa2\x20\xc2\x37\xa1\x3e\x22\x4c\xc4\x34\xc5\x3b\xcc\xe2\x79\xca\xa3\x53\x1b\xea\x17\x24\xaa\x92\x76\xe4\x86\xcb\x81\xef\xff\x88\x97\xbd\xfb\xf5\x08\x39\xe5\x4b\x30\xb3\x3b\xe6\x1d\x2c\x20\xef\x2a\x62\x48\x24\xd8\xe3\xbe\xd8\x15\x3b\xd6\x90\xa5\x42\x7e\xc0\xca\x5b\xa2\x70\xe0\xc1\x94\xa7\x93\xe8\xf6\xdf\xfc\xc1\x28\xce\xe6\x0f\x3c\x07\xfe\x9f\x00\x00\x00\xff\xff\xeb\x35\x8c\x4e\x0b\x04\x00\x00")

func _001_service_tableUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__001_service_tableUpSql,
		"001_service_table.up.sql",
	)
}

func _001_service_tableUpSql() (*asset, error) {
	bytes, err := _001_service_tableUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "001_service_table.up.sql", size: 1035, mode: os.FileMode(420), modTime: time.Unix(1517229166, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __002_dentry_tableDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd7\xe2\x52\xd0\x52\x70\x29\xca\x2f\x50\x48\x49\xcd\x2b\x29\xaa\x54\x08\x49\x4c\xca\x49\xe5\x52\xd0\xd2\xe7\xe2\xd2\xd5\x55\xd0\xc5\x04\x20\x61\x14\x1d\x25\x60\x1d\x38\x14\xbb\x04\xf9\x07\x28\x84\x38\x3a\xf9\xb8\x2a\x14\x94\x26\xe5\x64\x26\xeb\x41\x74\x59\x73\x01\x02\x00\x00\xff\xff\xff\x4e\xf3\x88\x7b\x00\x00\x00")

func _002_dentry_tableDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__002_dentry_tableDownSql,
		"002_dentry_table.down.sql",
	)
}

func _002_dentry_tableDownSql() (*asset, error) {
	bytes, err := _002_dentry_tableDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "002_dentry_table.down.sql", size: 123, mode: os.FileMode(420), modTime: time.Unix(1516908478, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __002_dentry_tableUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\x41\x6f\xd3\x40\x10\x85\xef\xfe\x15\x4f\x7b\xe9\xba\x4a\x5a\x81\x38\xa0\x56\x1c\x8c\xb3\x05\x0b\xe3\x40\xbc\x16\xf4\x64\x6d\xbc\x53\x58\xd1\xda\x66\x3d\x2e\x69\x7f\x3d\x4a\x1c\x57\x16\x15\x09\x07\x7c\xf4\xbc\xf7\x69\x67\xf4\x9d\x9f\x06\x38\x45\xec\xc9\x30\xc1\x52\xcd\xfe\x01\xda\xac\x6f\x29\xc0\xe9\x79\x10\xcc\xe7\x98\x1f\xf8\xb6\xf3\x21\x8e\x8e\x7d\x5f\x71\xef\x09\x37\x8d\xdf\x93\x8e\xd6\xe3\x95\x8a\xb4\x82\x8e\xde\xa6\x0a\x6d\xbf\xbe\x75\xd5\xd9\x50\x95\x01\x00\x08\x67\x05\xfa\xde\x59\x64\x4b\x8d\xac\x48\x53\x2c\xd4\x55\x54\xa4\x7a\xf7\xb7\xfc\x46\x35\x79\xc3\x54\xde\xbf\x92\xe1\x6c\xa8\x54\xbb\x5d\x4a\x6b\x98\x04\xd8\xdd\x51\xc7\xe6\xae\xe5\xc7\xe7\x88\xed\xf0\xb1\xa9\x49\x9e\x14\x3a\x3e\xb9\xb8\x60\xda\xf0\x0c\x75\xf3\x4b\x86\x23\xac\x6f\xed\xff\x83\x59\x36\x6b\x81\x7b\xe3\xab\xef\xc6\xcb\x17\x2f\x5f\x87\x4f\x98\x7d\xa2\xf5\x74\xe3\x36\x87\x33\x96\x3a\x76\xb5\x61\xd7\xd4\xc7\x60\xae\xf1\x8e\x1f\x04\x5c\xcd\x7f\x0c\xe3\x65\x96\xeb\x55\x94\x64\x1a\xa2\xfd\x51\x0e\x37\x17\xf8\xb4\x4a\x3e\x46\xab\x6b\x7c\x50\xd7\x90\xdb\xe3\x87\xcf\xe3\xfd\xcf\x7d\xbc\xdc\xee\x53\x8e\x4f\x2e\xb2\xe4\x73\xa1\xe4\xb0\xe4\xec\x69\x95\x30\x08\xf1\x25\xd1\xef\x21\x97\xc9\x22\xc7\x1b\x5c\x45\x69\xae\xc2\xcb\x23\x6a\xed\xc4\x4a\x6a\x4b\x1b\xea\x26\x42\x81\x77\x6a\x1e\xae\xee\xa5\x4a\xb2\x85\xfa\x0a\xe1\x36\xe3\x73\x27\x62\x94\x96\xba\x4a\x60\x99\x41\x0c\xd6\x89\x33\x31\xde\xa0\xc8\x93\xec\x1d\xd6\xec\x89\xe4\xa4\x82\x85\xca\xe3\xf0\xf2\xaf\xf4\x89\x29\xff\x4a\x9f\x54\x46\xfa\xef\x00\x00\x00\xff\xff\xb8\xd1\xe7\x32\x8f\x03\x00\x00")

func _002_dentry_tableUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__002_dentry_tableUpSql,
		"002_dentry_table.up.sql",
	)
}

func _002_dentry_tableUpSql() (*asset, error) {
	bytes, err := _002_dentry_tableUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "002_dentry_table.up.sql", size: 911, mode: os.FileMode(420), modTime: time.Unix(1517216629, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"001_service_table.down.sql": _001_service_tableDownSql,
	"001_service_table.up.sql": _001_service_tableUpSql,
	"002_dentry_table.down.sql": _002_dentry_tableDownSql,
	"002_dentry_table.up.sql": _002_dentry_tableUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"001_service_table.down.sql": &bintree{_001_service_tableDownSql, map[string]*bintree{}},
	"001_service_table.up.sql": &bintree{_001_service_tableUpSql, map[string]*bintree{}},
	"002_dentry_table.down.sql": &bintree{_002_dentry_tableDownSql, map[string]*bintree{}},
	"002_dentry_table.up.sql": &bintree{_002_dentry_tableUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

