// Code generated by go-bindata.
// sources:
// migrations/001_service_table.down.sql
// migrations/001_service_table.up.sql
// migrations/002_dentry_table.down.sql
// migrations/002_dentry_table.up.sql
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __001_service_tableDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd7\xe2\x52\xd0\x52\x70\x29\xca\x2f\x50\x28\x4e\x2d\x2a\xcb\x4c\x4e\x55\x08\x49\x4c\xca\x49\xe5\x52\xd0\xd2\xe7\xe2\xd2\xd5\x55\xd0\xc5\x04\x20\x61\x54\x2d\x25\x60\x2d\x38\x54\xbb\x04\xf9\x07\x28\x84\x38\x3a\xf9\xb8\x2a\x14\x94\x26\xe5\x64\x26\xeb\x41\xb5\x59\x73\x01\x02\x00\x00\xff\xff\x9b\x8b\xb5\xe2\x7e\x00\x00\x00")

func _001_service_tableDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__001_service_tableDownSql,
		"001_service_table.down.sql",
	)
}

func _001_service_tableDownSql() (*asset, error) {
	bytes, err := _001_service_tableDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "001_service_table.down.sql", size: 126, mode: os.FileMode(420), modTime: time.Unix(1516905169, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __001_service_tableUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x93\xcf\x8e\xd3\x3c\x14\xc5\xf7\x79\x8a\x23\x6f\x26\xa9\xda\x19\x7d\x9f\x58\xa0\x19\xb1\x08\xad\x0b\x16\xc5\x85\xc6\x11\x9d\x55\xe4\x26\x97\xc1\xa2\x4d\x82\xed\x94\x6a\x9e\x1e\x25\xfd\xa3\xc0\x88\xb6\x0b\xb2\xcc\xbd\xe7\xa7\x73\x6e\x4e\xee\x06\x01\x06\x18\x5b\xd2\x9e\xe0\xc8\x6e\x4d\x4e\x50\x7a\xb5\xa6\x00\x83\xbb\x20\x18\x8d\x30\x3a\xf3\xb4\x73\xf0\xd2\x35\x96\xd0\x34\xa6\x18\x55\xce\xd5\x30\x0e\x54\xb6\x8c\xe2\xa2\x7e\xbc\xe0\xb1\xe2\xe0\x4b\xc5\x65\x22\xe6\x12\x62\x0a\x39\x57\xe0\x4b\x91\xa8\x04\xec\x04\x65\x0f\xd7\x99\xe9\xbc\xc3\x79\xdb\xe4\xbe\x75\xf5\xb5\xb2\xc7\x5c\xd7\x9a\x51\xf1\xdb\x19\x47\xdd\xac\xd6\x26\xbf\x3d\x68\xc3\x00\x00\x98\x29\x58\x97\xb3\xf3\x28\xd3\xd9\x0c\x13\x3e\x8d\xd3\x99\xea\xde\x66\x4f\x54\x92\xd5\x9e\xb2\xed\xab\x30\x1a\xee\x25\x79\x77\xdb\xac\xd0\x9e\x18\xbc\xd9\x90\xf3\x7a\x53\xfb\xe7\x97\x88\x76\xf8\x5c\x95\x14\xde\xa4\x6a\x7c\x73\x7f\xef\x69\xe7\x87\x28\xab\x9f\x61\x74\x84\x35\x75\xf1\xef\x60\xeb\xea\xc9\xe4\x7a\x9d\x95\x7a\x43\x0c\x5b\x6d\xf3\x6f\xda\x86\xff\xfd\xff\x3a\x3a\xe1\x0e\x9b\x85\xd7\xab\xf3\x1b\x2d\xc3\xd5\x3a\xbf\x04\x22\x97\x5b\x53\x7b\x53\x95\x0c\xad\xa5\x3f\x16\xc6\x73\x99\xa8\x45\x2c\xa4\x02\xab\xbf\x67\x87\xe3\x33\x7c\x5a\x88\x8f\xf1\xe2\x11\x1f\xf8\x23\xc2\xf6\x2b\x44\x2f\xf7\x9b\x1f\xc7\xfd\xac\x9f\x2c\xdb\x9b\x4f\xa5\xf8\x9c\xf2\xf0\xf7\xd0\xc3\x43\xb4\x28\x88\xf0\x45\xa8\xf7\x08\xe7\x62\x92\xe0\x0d\xa6\xf1\x2c\xe1\xd1\xa5\xca\x75\x85\x13\x65\x41\x3b\x72\xfd\xa2\xc1\x77\x3f\xd0\x79\xed\xa1\x6c\x42\x4e\xf8\x12\xcc\xec\x4e\xe6\x7b\x85\xc9\xda\x7b\x31\xcc\x25\xd8\xbe\x8e\xec\x96\x9d\x6e\x92\x26\x42\xbe\xc3\xca\x5b\xa2\xb0\xa7\xc1\x84\x27\xe3\xe8\xe1\xef\xfc\x5e\x87\xae\xe6\xf7\x34\x47\xfe\xaf\x00\x00\x00\xff\xff\x9c\x8e\x0f\xf8\x3a\x04\x00\x00")

func _001_service_tableUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__001_service_tableUpSql,
		"001_service_table.up.sql",
	)
}

func _001_service_tableUpSql() (*asset, error) {
	bytes, err := _001_service_tableUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "001_service_table.up.sql", size: 1082, mode: os.FileMode(420), modTime: time.Unix(1516982741, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __002_dentry_tableDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd7\xe2\x52\xd0\x52\x70\x29\xca\x2f\x50\x48\x49\xcd\x2b\x29\xaa\x54\x08\x49\x4c\xca\x49\xe5\x52\xd0\xd2\xe7\xe2\xd2\xd5\x55\xd0\xc5\x04\x20\x61\x14\x1d\x25\x60\x1d\x38\x14\xbb\x04\xf9\x07\x28\x84\x38\x3a\xf9\xb8\x2a\x14\x94\x26\xe5\x64\x26\xeb\x41\x74\x59\x73\x01\x02\x00\x00\xff\xff\xff\x4e\xf3\x88\x7b\x00\x00\x00")

func _002_dentry_tableDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__002_dentry_tableDownSql,
		"002_dentry_table.down.sql",
	)
}

func _002_dentry_tableDownSql() (*asset, error) {
	bytes, err := _002_dentry_tableDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "002_dentry_table.down.sql", size: 123, mode: os.FileMode(420), modTime: time.Unix(1516908478, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __002_dentry_tableUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\xc1\x6e\xd3\x40\x10\x86\xef\x7e\x8a\x5f\x7b\xe9\x3a\x6a\x5a\x81\x38\xa0\x56\x1c\x8c\xb3\x05\x0b\xe3\xa0\x78\x23\xe8\xc9\xda\x78\xa7\xb0\xa2\x5d\x5b\xeb\x71\x49\xfb\xf4\x28\xb1\x83\x2c\x10\x09\x07\x7c\xf4\xcc\xff\x69\x67\xe6\xbb\x9c\x45\x98\x21\x0d\x64\x98\x60\xc9\x73\x78\x82\x36\x9b\x7b\x8a\x30\xbb\x8c\xa2\xf9\x1c\xf3\x23\xdf\xae\x3e\xb4\xa3\xe3\xd0\xd7\xdc\x07\xc2\x5d\x13\x46\xd2\xc9\x78\xba\x52\x89\x56\xd0\xc9\xdb\x5c\xa1\xed\x37\xf7\xae\xbe\x18\xa2\x32\x02\x00\xe1\xac\x40\xdf\x3b\x8b\x62\xa9\x51\xac\xf3\x1c\x0b\x75\x93\xac\x73\xbd\xff\x5b\x7d\x25\x4f\xc1\x30\x55\x8f\xaf\x64\x7c\x3e\x44\xea\xfd\x2c\x95\x35\x4c\x02\xec\x1e\xa8\x63\xf3\xd0\xf2\xf3\x9f\x88\x5d\xf1\xb9\xf1\x24\xcf\xd6\x3a\x3d\xbb\xba\x62\xda\xf2\x39\x7c\xf3\x43\xc6\x07\x58\xdf\xda\xff\x07\xb3\x6c\x36\x02\x8f\x26\xd4\xdf\x4c\x90\x2f\x5e\xbe\x8e\x7f\x61\xc6\x8e\x36\xd0\x9d\xdb\x1e\xef\xb1\xd4\xb1\xf3\x86\x5d\xe3\x4f\xc1\x5c\x13\x1c\x3f\x09\x38\xcf\xbf\x15\xd3\x65\x51\xea\x55\x92\x15\x1a\xa2\xfd\x5e\x0d\x3b\x17\xf8\xb4\xca\x3e\x26\xab\x5b\x7c\x50\xb7\x90\xbb\xe5\xc7\x51\x8c\xcf\x99\x7e\x0f\xb9\xcc\x16\x25\xde\xe0\x26\xc9\x4b\x15\x5f\x9f\x30\x63\xef\x45\xe6\x2d\x6d\xa9\x9b\xf8\x00\xde\x9b\x75\x3c\x3a\x3a\x91\x15\x0b\xf5\x05\xc2\x6d\xc7\xc7\x55\x93\xbb\x56\x96\xba\x5a\x60\x59\x40\x0c\xd2\x88\x0b\x71\x18\x61\x5d\x66\xc5\x3b\x6c\x38\x10\xc9\x49\x04\x0b\x55\xa6\xf1\xf5\x5f\xe9\x93\x43\xff\x2b\x7d\x12\x39\xd0\x7f\x06\x00\x00\xff\xff\xac\x4c\xe5\x91\x4e\x03\x00\x00")

func _002_dentry_tableUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__002_dentry_tableUpSql,
		"002_dentry_table.up.sql",
	)
}

func _002_dentry_tableUpSql() (*asset, error) {
	bytes, err := _002_dentry_tableUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "002_dentry_table.up.sql", size: 846, mode: os.FileMode(420), modTime: time.Unix(1516980058, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"001_service_table.down.sql": _001_service_tableDownSql,
	"001_service_table.up.sql": _001_service_tableUpSql,
	"002_dentry_table.down.sql": _002_dentry_tableDownSql,
	"002_dentry_table.up.sql": _002_dentry_tableUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"001_service_table.down.sql": &bintree{_001_service_tableDownSql, map[string]*bintree{}},
	"001_service_table.up.sql": &bintree{_001_service_tableUpSql, map[string]*bintree{}},
	"002_dentry_table.down.sql": &bintree{_002_dentry_tableDownSql, map[string]*bintree{}},
	"002_dentry_table.up.sql": &bintree{_002_dentry_tableUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

