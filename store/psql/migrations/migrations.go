// Code generated by go-bindata.
// sources:
// migrations/001_service_table.down.sql
// migrations/001_service_table.up.sql
// migrations/002_dentry_table.down.sql
// migrations/002_dentry_table.up.sql
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __001_service_tableDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd7\xe2\x52\xd0\x52\x70\x29\xca\x2f\x50\x28\x4e\x2d\x2a\xcb\x4c\x4e\x55\x08\x49\x4c\xca\x49\xe5\x52\xd0\xd2\xe7\xe2\xd2\xd5\x55\xd0\xc5\x04\x20\x61\x54\x2d\x25\x60\x2d\x38\x54\xbb\x04\xf9\x07\x28\x84\x38\x3a\xf9\xb8\x2a\x14\x94\x26\xe5\x64\x26\xeb\x41\xb5\x59\x73\x01\x02\x00\x00\xff\xff\x9b\x8b\xb5\xe2\x7e\x00\x00\x00")

func _001_service_tableDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__001_service_tableDownSql,
		"001_service_table.down.sql",
	)
}

func _001_service_tableDownSql() (*asset, error) {
	bytes, err := _001_service_tableDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "001_service_table.down.sql", size: 126, mode: os.FileMode(420), modTime: time.Unix(1516905169, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __001_service_tableUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\xc1\x8f\x93\x40\x18\xc5\xef\xfc\x15\x2f\x73\x59\x68\xda\xdd\xe8\xc9\xec\xc6\x03\xc2\xac\x12\x11\x0c\x0c\xd1\x9e\xc8\x30\x7c\x2a\x91\x02\x19\x86\xda\xf4\xaf\x37\x50\xda\xa0\x89\xad\x87\x9d\xeb\xf7\xde\x2f\xef\x9b\xef\x3d\xac\x2c\xac\xe0\x69\x92\x86\xd0\x93\xde\x57\x8a\x20\x64\x51\x93\x85\xd5\x83\x65\x6d\x36\xd8\x5c\x79\xe3\xfc\x24\x47\x6f\xf4\xa0\xcc\xa0\x09\xdf\x5a\x7d\x46\xdd\xf4\x7b\x09\x77\x05\x87\x70\xdf\x85\x1c\xdd\x50\xd4\x95\xba\x9f\xbd\xb6\x05\x00\x4c\x4d\xd9\xf2\x52\x1a\x62\x30\xd5\x8e\x7a\x23\x77\x9d\x39\x22\x8a\x05\xa2\x2c\x0c\xe1\xf3\x67\x37\x0b\xc5\x34\x3c\xb6\x0d\xd9\x77\x99\xf0\xee\x1e\x1f\x0d\x1d\xcc\x1a\x4d\xfb\xcb\x76\x9c\xf5\x09\x36\x74\xe5\xcb\xc1\xea\xf6\x7b\xa5\x64\x9d\x37\x72\x47\x0c\x7b\xa9\xd5\x0f\xa9\xed\x57\xaf\xdf\x38\x17\xdc\xac\x2c\x8d\x2c\xae\x2b\x46\x46\xdf\x49\x75\x0b\x44\xbd\xd2\x55\x67\xaa\xb6\x61\x18\x23\xfd\x25\xf0\xe2\x28\x15\x89\x1b\x44\x02\xac\xfb\x99\xcf\x3f\xc9\xf0\x39\x09\x3e\xb9\xc9\x16\x1f\xf9\x16\xf6\x9f\xc1\xd7\x73\x3c\xc7\x72\xf0\x25\x10\x1f\x60\xc7\x81\x9f\xe2\x2d\x9e\xdd\x30\xe5\xce\xd3\x8d\x0e\x4c\x0d\x08\x9a\x92\x0e\xd4\x2f\x2f\x0f\x33\x95\xe8\xba\x77\xbe\x7e\x10\xf9\xfc\x2b\x58\x75\x38\x07\xce\x17\x47\xcf\xc7\x9d\x19\xe2\x08\xec\xd4\x0f\x76\xcf\x2e\x7b\x65\x69\x10\xbd\x47\x61\x34\x91\xbd\xf0\xc0\xe7\xa9\xe7\x3c\xfd\x9b\xbf\xe8\xc1\x7f\xf3\x17\x9e\x33\xff\x77\x00\x00\x00\xff\xff\xd9\xff\x1f\x83\x3e\x03\x00\x00")

func _001_service_tableUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__001_service_tableUpSql,
		"001_service_table.up.sql",
	)
}

func _001_service_tableUpSql() (*asset, error) {
	bytes, err := _001_service_tableUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "001_service_table.up.sql", size: 830, mode: os.FileMode(420), modTime: time.Unix(1516960788, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __002_dentry_tableDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd7\xe2\x52\xd0\x52\x70\x29\xca\x2f\x50\x48\x49\xcd\x2b\x29\xaa\x54\x08\x49\x4c\xca\x49\xe5\x52\xd0\xd2\xe7\xe2\xd2\xd5\x55\xd0\xc5\x04\x20\x61\x14\x1d\x25\x60\x1d\x38\x14\xbb\x04\xf9\x07\x28\x84\x38\x3a\xf9\xb8\x2a\x14\x94\x26\xe5\x64\x26\xeb\x41\x74\x59\x73\x01\x02\x00\x00\xff\xff\xff\x4e\xf3\x88\x7b\x00\x00\x00")

func _002_dentry_tableDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__002_dentry_tableDownSql,
		"002_dentry_table.down.sql",
	)
}

func _002_dentry_tableDownSql() (*asset, error) {
	bytes, err := _002_dentry_tableDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "002_dentry_table.down.sql", size: 123, mode: os.FileMode(420), modTime: time.Unix(1516908478, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __002_dentry_tableUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\x4f\x6f\xd3\x40\x10\xc5\xef\xfe\x14\x4f\x7b\xa9\x1d\x35\xad\x40\x1c\x50\x2b\x0e\xc6\xd9\xc0\x0a\x63\xa3\x78\x23\xd2\x93\xe5\x78\xa7\xb0\xa2\x5d\x5b\xbb\xeb\x92\xf6\xd3\x23\x3b\x7f\x64\x81\x48\x72\xe8\x1e\x77\xe6\xfd\xf4\x66\xe6\x5d\x4f\x02\x4c\x90\x58\xaa\x3c\x41\x91\xf1\xf6\x19\xb2\x5a\x3f\x50\x80\xc9\x75\x10\x4c\xa7\x98\x1e\x79\x7d\x1d\xdc\xb8\xce\x12\xba\x4e\xab\x69\xe3\x5c\x0b\xed\x40\xa6\x67\xa8\x93\xfa\x64\xc1\x63\xc9\xc1\x57\x92\x67\x85\xc8\x33\x88\x39\xb2\x5c\x82\xaf\x44\x21\x0b\xb0\x03\x94\xdd\x9e\x67\x66\xf0\x0e\xe7\x6d\x57\xfb\xde\xd5\x7d\x63\x77\x63\x9d\xeb\x45\xc6\x1f\x53\x8e\xb6\x5b\x3f\xe8\xfa\x6a\x2b\x0d\x03\x00\x60\x5a\xb1\x61\xca\xc1\x61\xb6\x4c\x53\xcc\xf8\x3c\x5e\xa6\x72\xf8\x2d\x7f\x90\x21\x5b\x79\x2a\x9f\xde\x85\xd1\xe5\x56\x52\x0f\x8b\x2d\x55\xe5\x89\xc1\xeb\x47\x72\xbe\x7a\x6c\xfd\xcb\xbf\x88\xbe\xf8\xd2\x18\x0a\x2f\x96\x32\xb9\xb8\xb9\xf1\xb4\xf1\x97\x30\xcd\xef\x30\xda\xc3\xba\x56\xbd\x1e\x4c\xf9\x6a\xcd\xf0\x54\xd9\xfa\x67\x65\xc3\x37\x6f\xdf\x47\x07\xcc\xae\xa3\xb5\x74\xaf\x37\xc7\x7b\x14\x39\xaf\x4d\xe5\x75\x63\x4e\xc1\x74\x63\xb5\x7f\x66\xd0\xc6\xff\x55\x4c\xf2\xac\x90\x8b\x58\x64\x12\xac\xfd\x55\x6e\x77\xce\xf0\x6d\x21\xbe\xc6\x8b\x3b\x7c\xe1\x77\x08\xfb\xe5\x47\x41\x84\xef\x42\x7e\x46\x98\x8b\x59\x81\x0f\x98\xc7\x69\xc1\xa3\x53\xc9\x18\x72\x21\x8c\xa2\x0d\xb9\x51\x1e\xe0\x87\x98\x1f\x97\xee\x32\x21\xb2\x19\x5f\x81\xe9\xcd\xce\x5c\x39\xba\x6b\xa9\xc8\xd5\x0c\x79\x06\xb6\x0d\x0d\xbb\x62\xfb\x11\x96\x85\xc8\x3e\x61\xed\x2d\x51\x38\x92\x60\xc6\x8b\x24\xba\xfd\x2f\x7d\x74\xe8\x73\xe9\x23\xc9\x9e\xfe\x27\x00\x00\xff\xff\xa6\xbd\x75\xaf\xdb\x03\x00\x00")

func _002_dentry_tableUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__002_dentry_tableUpSql,
		"002_dentry_table.up.sql",
	)
}

func _002_dentry_tableUpSql() (*asset, error) {
	bytes, err := _002_dentry_tableUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "002_dentry_table.up.sql", size: 987, mode: os.FileMode(420), modTime: time.Unix(1516960780, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"001_service_table.down.sql": _001_service_tableDownSql,
	"001_service_table.up.sql": _001_service_tableUpSql,
	"002_dentry_table.down.sql": _002_dentry_tableDownSql,
	"002_dentry_table.up.sql": _002_dentry_tableUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"001_service_table.down.sql": &bintree{_001_service_tableDownSql, map[string]*bintree{}},
	"001_service_table.up.sql": &bintree{_001_service_tableUpSql, map[string]*bintree{}},
	"002_dentry_table.down.sql": &bintree{_002_dentry_tableDownSql, map[string]*bintree{}},
	"002_dentry_table.up.sql": &bintree{_002_dentry_tableUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

