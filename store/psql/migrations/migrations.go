// Code generated by go-bindata.
// sources:
// migrations/001_service_table.down.sql
// migrations/001_service_table.up.sql
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __001_service_tableDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd7\xe2\x52\xd0\x52\x70\x29\xca\x2f\x50\x28\x4e\x2d\x2a\xcb\x4c\x4e\x55\x08\x49\x4c\xca\x49\xe5\x52\xd0\xd2\xe7\xe2\xd2\xd5\x55\xd0\xc5\x04\x20\x61\x54\x2d\x25\x60\x2d\x38\x54\xbb\x04\xf9\x07\x28\x84\x38\x3a\xf9\xb8\x2a\x14\x94\x26\xe5\x64\x26\xeb\x41\xb5\x59\x73\x01\x02\x00\x00\xff\xff\x9b\x8b\xb5\xe2\x7e\x00\x00\x00")

func _001_service_tableDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__001_service_tableDownSql,
		"001_service_table.down.sql",
	)
}

func _001_service_tableDownSql() (*asset, error) {
	bytes, err := _001_service_tableDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "001_service_table.down.sql", size: 126, mode: os.FileMode(420), modTime: time.Unix(1516905169, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __001_service_tableUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\x41\xaf\x93\x40\x14\x85\xf7\xfc\x8a\x93\xd9\x3c\x68\xda\xf7\xa2\x2b\xf3\x1a\x17\x08\x53\x25\x22\x18\x18\xa2\x5d\x91\xe9\x70\x55\x22\x05\x32\x0c\xb5\xe9\xaf\x37\x50\xda\xa0\x89\xad\x8b\x37\xdb\x7b\xce\x77\xef\x9d\x73\x9f\x16\x16\x16\xf0\x34\x49\x43\xe8\x48\x1f\x4a\x45\x10\x72\x57\x91\x85\xc5\x93\x65\xad\x56\x58\xdd\x78\x43\xfd\x2c\x47\x67\x74\xaf\x4c\xaf\x09\xdf\x1a\x7d\x41\xdd\xf5\x7b\x09\x77\x05\x87\x70\xdf\x85\x1c\x6d\xbf\xab\x4a\xf5\x38\x79\x6d\x0b\x00\x98\x1a\x67\xcb\x0b\x69\x88\xc1\x94\x7b\xea\x8c\xdc\xb7\xe6\x84\x28\x16\x88\xb2\x30\x84\xcf\x37\x6e\x16\x8a\xb1\x78\x6a\x6a\xb2\x1f\x32\xe1\x3d\x3c\x3f\x1b\x3a\x9a\x25\xea\xe6\x97\xed\x38\xcb\x33\xac\x6f\x8b\x97\x83\x55\xcd\xf7\x52\xc9\x2a\xaf\xe5\x9e\x18\x0e\x52\xab\x1f\x52\xdb\xaf\x5e\xbf\x71\xae\xb8\x49\x39\x28\x3a\xd9\xaa\x3b\xb2\x82\x3a\xa5\xcb\xd6\x94\x4d\xcd\x30\x34\xfc\x4b\xe0\xc5\x51\x2a\x12\x37\x88\x04\x58\xfb\x33\x9f\xfe\x89\xe1\x73\x12\x7c\x72\x93\x2d\x3e\xf2\x2d\xec\x3f\xc7\x5a\x4e\xcd\x5b\xa9\x88\x39\x96\x83\x2f\x81\xf8\x00\x3b\x0e\xfc\x14\x6f\xb1\x71\xc3\x94\x3b\xeb\x3b\x31\x8f\x21\x07\x75\x41\x47\xea\xe6\xe1\xc2\x8c\x77\x72\xdb\x3b\x05\x1c\x44\x3e\xff\x0a\x56\x1e\x2f\x53\xe7\xb3\x5c\xf3\x61\x71\x86\x38\x02\x3b\x9f\x00\x7b\x64\xd7\xe5\xb2\x34\x88\xde\x63\x67\x34\x91\x3d\xf3\xc0\xe7\xa9\xe7\xac\xff\xcd\x9f\x45\xfd\xdf\xfc\x99\xe7\xc2\xff\x1d\x00\x00\xff\xff\xe9\x5b\xeb\x1e\x21\x03\x00\x00")

func _001_service_tableUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__001_service_tableUpSql,
		"001_service_table.up.sql",
	)
}

func _001_service_tableUpSql() (*asset, error) {
	bytes, err := _001_service_tableUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "001_service_table.up.sql", size: 801, mode: os.FileMode(420), modTime: time.Unix(1516905161, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"001_service_table.down.sql": _001_service_tableDownSql,
	"001_service_table.up.sql": _001_service_tableUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"001_service_table.down.sql": &bintree{_001_service_tableDownSql, map[string]*bintree{}},
	"001_service_table.up.sql": &bintree{_001_service_tableUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

