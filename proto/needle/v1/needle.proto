syntax = "proto3";

package compass.needle.v1;

import "google/protobuf/timestamp.proto";

option go_package = "needle/v1;needle";

// NeedleService the brains behind compass
service NeedleService {
  // PutService upserts services to be managed
  rpc PutService(PutServiceRequest) returns (PutServiceResponse) {}

  // PutDentry upserts dentries to be managed
  rpc PutDentry(PutDentryRequest) returns (PutDentryResponse) {}

  // RouteToVersion routes a specific logical name to a specifc lubernetets services
  // based on a services logicalName and version labels
  rpc RouteToVersion(RouteToVersionRequest) returns (RouteToVersionResponse) {}
}

// A Service is a service that compass is managing a namerd dentry for
message Service {
  // Id - the primary key - but not used for upserts
  string id = 1;

  // User created date
  google.protobuf.Timestamp create_date = 2;

  // User updated date
  google.protobuf.Timestamp update_date = 3;

  // The logical name, e.g HTTP/1.1 Host name or HTTP/2 :authority
  string logical_name = 4;

  // The namerd dtab (namespace) the service should be managed within
  string dtab = 5;

  // The kubernetets namespace the app runs in
  string namespace = 6;

  // Optional description of the service
  string description = 7;
}

// A Dentry is a single Delegation Table Rule
message Dentry {
  // Id - the primary key - but not used for upserts
  string id = 1;

  // Optional description of the service
  string service_id = 2;

  // User created date
  google.protobuf.Timestamp create_date = 3;

  // User updated date
  google.protobuf.Timestamp update_date = 4;

  // The prefix to match on
  string prefix = 5;

  // The destination of the matched prefix
  string destination = 6;

  // The dentry dtab (k8s namespace)
  string dtab = 7;

  // Prioity of the dentry - affects the ordering within the delegation table
  int32 priority = 8;
}

// Request for [PutService](compass.needle.v1.NeedleService.PutService)
message PutServiceRequest {
  // Service to be created or updated
  Service service = 1;
}

// Response for [PutService](compass.needle.v1.NeedleService.PutService)
message PutServiceResponse {
  // Service crated or updated
  Service service = 1;
}

// Request for [PutDentry](compass.needle.v1.NeedleService.PutDentry)
message PutDentryRequest {
  // Dentry to create or update
  Dentry dentry = 1;
}

// Response for [PutDentry](compass.needle.v1.NeedleService.PutDentry)
message PutDentryResponse {
  // Dentry crated or updated
  Dentry dentry = 1;
}

// Request for [RouteToVersion](compass.needle.v1.NeedleService.RouteToVersion)
message RouteToVersionRequest {
    // Logical name of the service to route
    string logical_name = 1;

    // Version string of the kubernetets service to route too
    string version = 3;
}

// Response for [RouteToVersion](compass.needle.v1.NeedleService.RouteToVersion)
message RouteToVersionResponse {
    // TODO: fill out
}
