// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/needle/v1/needle.proto

/*
Package needle is a generated protocol buffer package.

It is generated from these files:
	proto/needle/v1/needle.proto

It has these top-level messages:
	Service
	Dentry
	PutServiceRequest
	PutServiceResponse
	PutDentryRequest
	PutDentryResponse
*/
package needle

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// A Service is a service that compass is managing a namerd dentry for
type Service struct {
	// Id - the primary key - but not used for upserts
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// User created date
	CreateDate *google_protobuf.Timestamp `protobuf:"bytes,2,opt,name=create_date,json=createDate" json:"create_date,omitempty"`
	// User updated date
	UpdateDate *google_protobuf.Timestamp `protobuf:"bytes,3,opt,name=update_date,json=updateDate" json:"update_date,omitempty"`
	// The logical name, e.g HTTP/1.1 Host name or HTTP/2 :authority
	LogicalName string `protobuf:"bytes,4,opt,name=logical_name,json=logicalName" json:"logical_name,omitempty"`
	// The namerd dtab (namespace) the service should be managed within
	Dtab string `protobuf:"bytes,5,opt,name=dtab" json:"dtab,omitempty"`
	// The kubernetets namespace the app runs in
	Namespace string `protobuf:"bytes,6,opt,name=namespace" json:"namespace,omitempty"`
	// Optional description of the service
	Description string `protobuf:"bytes,7,opt,name=description" json:"description,omitempty"`
}

func (m *Service) Reset()                    { *m = Service{} }
func (m *Service) String() string            { return proto.CompactTextString(m) }
func (*Service) ProtoMessage()               {}
func (*Service) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Service) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Service) GetCreateDate() *google_protobuf.Timestamp {
	if m != nil {
		return m.CreateDate
	}
	return nil
}

func (m *Service) GetUpdateDate() *google_protobuf.Timestamp {
	if m != nil {
		return m.UpdateDate
	}
	return nil
}

func (m *Service) GetLogicalName() string {
	if m != nil {
		return m.LogicalName
	}
	return ""
}

func (m *Service) GetDtab() string {
	if m != nil {
		return m.Dtab
	}
	return ""
}

func (m *Service) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *Service) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

// A Dentry is a single Delegation Table Rule
type Dentry struct {
	// Id - the primary key - but not used for upserts
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Optional description of the service
	ServiceId string `protobuf:"bytes,2,opt,name=service_id,json=serviceId" json:"service_id,omitempty"`
	// User created date
	CreateDate *google_protobuf.Timestamp `protobuf:"bytes,3,opt,name=create_date,json=createDate" json:"create_date,omitempty"`
	// User updated date
	UpdateDate *google_protobuf.Timestamp `protobuf:"bytes,4,opt,name=update_date,json=updateDate" json:"update_date,omitempty"`
	// The prefix to match on
	Prefix string `protobuf:"bytes,5,opt,name=prefix" json:"prefix,omitempty"`
	// The destination of the matched prefix
	Destination string `protobuf:"bytes,6,opt,name=destination" json:"destination,omitempty"`
	// The dentry dtab (k8s namespace)
	Dtab string `protobuf:"bytes,7,opt,name=dtab" json:"dtab,omitempty"`
	// Prioity of the dentry - affects the ordering within the delegation table
	Priority int32 `protobuf:"varint,8,opt,name=priority" json:"priority,omitempty"`
}

func (m *Dentry) Reset()                    { *m = Dentry{} }
func (m *Dentry) String() string            { return proto.CompactTextString(m) }
func (*Dentry) ProtoMessage()               {}
func (*Dentry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Dentry) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Dentry) GetServiceId() string {
	if m != nil {
		return m.ServiceId
	}
	return ""
}

func (m *Dentry) GetCreateDate() *google_protobuf.Timestamp {
	if m != nil {
		return m.CreateDate
	}
	return nil
}

func (m *Dentry) GetUpdateDate() *google_protobuf.Timestamp {
	if m != nil {
		return m.UpdateDate
	}
	return nil
}

func (m *Dentry) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

func (m *Dentry) GetDestination() string {
	if m != nil {
		return m.Destination
	}
	return ""
}

func (m *Dentry) GetDtab() string {
	if m != nil {
		return m.Dtab
	}
	return ""
}

func (m *Dentry) GetPriority() int32 {
	if m != nil {
		return m.Priority
	}
	return 0
}

// Request for [PutService](compass.needle.v1.NeedleService.PutService)
type PutServiceRequest struct {
	// Service to be created or updated
	Service *Service `protobuf:"bytes,1,opt,name=service" json:"service,omitempty"`
}

func (m *PutServiceRequest) Reset()                    { *m = PutServiceRequest{} }
func (m *PutServiceRequest) String() string            { return proto.CompactTextString(m) }
func (*PutServiceRequest) ProtoMessage()               {}
func (*PutServiceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *PutServiceRequest) GetService() *Service {
	if m != nil {
		return m.Service
	}
	return nil
}

// Response for [PutService](compass.needle.v1.NeedleService.PutService)
type PutServiceResponse struct {
	// Service crated or updated
	Service *Service `protobuf:"bytes,1,opt,name=service" json:"service,omitempty"`
}

func (m *PutServiceResponse) Reset()                    { *m = PutServiceResponse{} }
func (m *PutServiceResponse) String() string            { return proto.CompactTextString(m) }
func (*PutServiceResponse) ProtoMessage()               {}
func (*PutServiceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *PutServiceResponse) GetService() *Service {
	if m != nil {
		return m.Service
	}
	return nil
}

// Request for [PutDentry](compass.needle.v1.NeedleService.PutDentry)
type PutDentryRequest struct {
	// Dentry to create or update
	Dentry *Dentry `protobuf:"bytes,1,opt,name=dentry" json:"dentry,omitempty"`
}

func (m *PutDentryRequest) Reset()                    { *m = PutDentryRequest{} }
func (m *PutDentryRequest) String() string            { return proto.CompactTextString(m) }
func (*PutDentryRequest) ProtoMessage()               {}
func (*PutDentryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *PutDentryRequest) GetDentry() *Dentry {
	if m != nil {
		return m.Dentry
	}
	return nil
}

// Response for [PutDentry](compass.needle.v1.NeedleService.PutDentry)
type PutDentryResponse struct {
	// Dentry crated or updated
	Dentry *Dentry `protobuf:"bytes,1,opt,name=dentry" json:"dentry,omitempty"`
}

func (m *PutDentryResponse) Reset()                    { *m = PutDentryResponse{} }
func (m *PutDentryResponse) String() string            { return proto.CompactTextString(m) }
func (*PutDentryResponse) ProtoMessage()               {}
func (*PutDentryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *PutDentryResponse) GetDentry() *Dentry {
	if m != nil {
		return m.Dentry
	}
	return nil
}

func init() {
	proto.RegisterType((*Service)(nil), "compass.needle.v1.Service")
	proto.RegisterType((*Dentry)(nil), "compass.needle.v1.Dentry")
	proto.RegisterType((*PutServiceRequest)(nil), "compass.needle.v1.PutServiceRequest")
	proto.RegisterType((*PutServiceResponse)(nil), "compass.needle.v1.PutServiceResponse")
	proto.RegisterType((*PutDentryRequest)(nil), "compass.needle.v1.PutDentryRequest")
	proto.RegisterType((*PutDentryResponse)(nil), "compass.needle.v1.PutDentryResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for NeedleService service

type NeedleServiceClient interface {
	// PutService upserts services to be managed
	PutService(ctx context.Context, in *PutServiceRequest, opts ...grpc.CallOption) (*PutServiceResponse, error)
	// PutDentry upserts dentries to be managed
	PutDentry(ctx context.Context, in *PutDentryRequest, opts ...grpc.CallOption) (*PutDentryResponse, error)
}

type needleServiceClient struct {
	cc *grpc.ClientConn
}

func NewNeedleServiceClient(cc *grpc.ClientConn) NeedleServiceClient {
	return &needleServiceClient{cc}
}

func (c *needleServiceClient) PutService(ctx context.Context, in *PutServiceRequest, opts ...grpc.CallOption) (*PutServiceResponse, error) {
	out := new(PutServiceResponse)
	err := grpc.Invoke(ctx, "/compass.needle.v1.NeedleService/PutService", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *needleServiceClient) PutDentry(ctx context.Context, in *PutDentryRequest, opts ...grpc.CallOption) (*PutDentryResponse, error) {
	out := new(PutDentryResponse)
	err := grpc.Invoke(ctx, "/compass.needle.v1.NeedleService/PutDentry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NeedleService service

type NeedleServiceServer interface {
	// PutService upserts services to be managed
	PutService(context.Context, *PutServiceRequest) (*PutServiceResponse, error)
	// PutDentry upserts dentries to be managed
	PutDentry(context.Context, *PutDentryRequest) (*PutDentryResponse, error)
}

func RegisterNeedleServiceServer(s *grpc.Server, srv NeedleServiceServer) {
	s.RegisterService(&_NeedleService_serviceDesc, srv)
}

func _NeedleService_PutService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NeedleServiceServer).PutService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/compass.needle.v1.NeedleService/PutService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NeedleServiceServer).PutService(ctx, req.(*PutServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NeedleService_PutDentry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutDentryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NeedleServiceServer).PutDentry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/compass.needle.v1.NeedleService/PutDentry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NeedleServiceServer).PutDentry(ctx, req.(*PutDentryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NeedleService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "compass.needle.v1.NeedleService",
	HandlerType: (*NeedleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PutService",
			Handler:    _NeedleService_PutService_Handler,
		},
		{
			MethodName: "PutDentry",
			Handler:    _NeedleService_PutDentry_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/needle/v1/needle.proto",
}

func init() { proto.RegisterFile("proto/needle/v1/needle.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 462 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0xcd, 0x6e, 0xd3, 0x40,
	0x18, 0xc4, 0x6e, 0xea, 0xd4, 0x5f, 0x00, 0xb5, 0x7b, 0x40, 0xc6, 0x2a, 0x22, 0x98, 0x22, 0xe5,
	0xe4, 0x28, 0x85, 0x5b, 0x6f, 0xa8, 0x20, 0x95, 0x43, 0x55, 0x19, 0x0e, 0x08, 0x0e, 0xd1, 0xc6,
	0xfb, 0x35, 0x5a, 0x29, 0xf6, 0x2e, 0xde, 0x75, 0x44, 0x5f, 0x81, 0x57, 0xe0, 0x7d, 0x78, 0x2e,
	0x94, 0xfd, 0x71, 0x83, 0x1c, 0x51, 0x15, 0x6e, 0xbb, 0xb3, 0x33, 0xa3, 0xf9, 0x26, 0x5f, 0x0c,
	0xc7, 0xb2, 0x11, 0x5a, 0x4c, 0x6b, 0x44, 0xb6, 0xc2, 0xe9, 0x7a, 0xe6, 0x4e, 0xb9, 0x81, 0xc9,
	0x51, 0x29, 0x2a, 0x49, 0x95, 0xca, 0x1d, 0xba, 0x9e, 0xa5, 0xcf, 0x97, 0x42, 0x2c, 0x57, 0x38,
	0x35, 0x84, 0x45, 0x7b, 0x3d, 0xd5, 0xbc, 0x42, 0xa5, 0x69, 0x25, 0xad, 0x26, 0xfb, 0x11, 0xc2,
	0xf0, 0x23, 0x36, 0x6b, 0x5e, 0x22, 0x79, 0x0c, 0x21, 0x67, 0x49, 0x30, 0x0e, 0x26, 0x71, 0x11,
	0x72, 0x46, 0xce, 0x60, 0x54, 0x36, 0x48, 0x35, 0xce, 0x19, 0xd5, 0x98, 0x84, 0xe3, 0x60, 0x32,
	0x3a, 0x4d, 0x73, 0x6b, 0x99, 0x7b, 0xcb, 0xfc, 0x93, 0xb7, 0x2c, 0xc0, 0xd2, 0xcf, 0xa9, 0xc6,
	0x8d, 0xb8, 0x95, 0xac, 0x13, 0xef, 0xdd, 0x2d, 0xb6, 0x74, 0x23, 0x7e, 0x01, 0x0f, 0x57, 0x62,
	0xc9, 0x4b, 0xba, 0x9a, 0xd7, 0xb4, 0xc2, 0x64, 0x60, 0x32, 0x8d, 0x1c, 0x76, 0x49, 0x2b, 0x24,
	0x04, 0x06, 0x4c, 0xd3, 0x45, 0xb2, 0x6f, 0x9e, 0xcc, 0x99, 0x1c, 0x43, 0xbc, 0xa1, 0x2b, 0x49,
	0x4b, 0x4c, 0x22, 0xf3, 0x70, 0x0b, 0x90, 0x31, 0x8c, 0x18, 0xaa, 0xb2, 0xe1, 0x52, 0x73, 0x51,
	0x27, 0x43, 0xeb, 0xb9, 0x05, 0x65, 0x3f, 0x43, 0x88, 0xce, 0xb1, 0xd6, 0xcd, 0x4d, 0xaf, 0x8b,
	0x67, 0x00, 0xca, 0xd6, 0x34, 0xe7, 0xcc, 0x54, 0x11, 0x17, 0xb1, 0x43, 0x2e, 0x7a, 0x55, 0xed,
	0xfd, 0x4f, 0x55, 0x83, 0x7b, 0x55, 0xf5, 0x04, 0x22, 0xd9, 0xe0, 0x35, 0xff, 0xee, 0x9a, 0x70,
	0x37, 0x37, 0xad, 0xe6, 0x35, 0x35, 0xd3, 0x46, 0xdd, 0xb4, 0x1e, 0xea, 0x1a, 0x1c, 0x6e, 0x35,
	0x98, 0xc2, 0x81, 0x6c, 0xb8, 0x68, 0xb8, 0xbe, 0x49, 0x0e, 0xc6, 0xc1, 0x64, 0xbf, 0xe8, 0xee,
	0xd9, 0x05, 0x1c, 0x5d, 0xb5, 0xda, 0x2d, 0x4b, 0x81, 0xdf, 0x5a, 0x54, 0x9a, 0xbc, 0x81, 0xa1,
	0x6b, 0xc1, 0x94, 0xb5, 0xc9, 0xdd, 0xdb, 0xc2, 0xdc, 0x6b, 0x3c, 0x35, 0xfb, 0x00, 0x64, 0xdb,
	0x4a, 0x49, 0x51, 0x2b, 0xfc, 0x47, 0xaf, 0x77, 0x70, 0x78, 0xd5, 0x6a, 0xfb, 0xb3, 0xf9, 0x54,
	0x33, 0x88, 0x98, 0x01, 0x9c, 0xd1, 0xd3, 0x1d, 0x46, 0x4e, 0xe1, 0x88, 0xd9, 0x7b, 0x33, 0x9d,
	0xb7, 0x71, 0x89, 0xee, 0xef, 0x73, 0xfa, 0x2b, 0x80, 0x47, 0x97, 0xe6, 0xd1, 0xff, 0xad, 0xbe,
	0x02, 0xdc, 0x0e, 0x4b, 0x4e, 0x76, 0x58, 0xf4, 0x6a, 0x4d, 0x5f, 0xdd, 0xc1, 0xb2, 0xf9, 0xb2,
	0x07, 0xe4, 0x33, 0xc4, 0x5d, 0x6c, 0xf2, 0x72, 0xb7, 0xea, 0x8f, 0x6e, 0xd2, 0x93, 0xbf, 0x93,
	0xbc, 0xf3, 0x5b, 0xf2, 0xe5, 0xb0, 0xfb, 0xce, 0x9c, 0xd9, 0xd3, 0x22, 0x32, 0xcb, 0xf8, 0xfa,
	0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x2a, 0x7a, 0x72, 0x7c, 0x88, 0x04, 0x00, 0x00,
}
