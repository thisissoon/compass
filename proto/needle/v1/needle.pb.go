// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/needle/v1/needle.proto

/*
Package needle is a generated protocol buffer package.

It is generated from these files:
	proto/needle/v1/needle.proto

It has these top-level messages:
	PutServiceRequest
	PutServiceResponse
	Service
*/
package needle

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Request for [PutService](compass.needle.v1.PutService)
type PutServiceRequest struct {
	// Service to be created or updated
	Service *Service `protobuf:"bytes,1,opt,name=service" json:"service,omitempty"`
}

func (m *PutServiceRequest) Reset()                    { *m = PutServiceRequest{} }
func (m *PutServiceRequest) String() string            { return proto.CompactTextString(m) }
func (*PutServiceRequest) ProtoMessage()               {}
func (*PutServiceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PutServiceRequest) GetService() *Service {
	if m != nil {
		return m.Service
	}
	return nil
}

// Response for [PutService](compass.needle.v1.PutService)
type PutServiceResponse struct {
	// Service crated or updated
	Service *Service `protobuf:"bytes,1,opt,name=service" json:"service,omitempty"`
}

func (m *PutServiceResponse) Reset()                    { *m = PutServiceResponse{} }
func (m *PutServiceResponse) String() string            { return proto.CompactTextString(m) }
func (*PutServiceResponse) ProtoMessage()               {}
func (*PutServiceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PutServiceResponse) GetService() *Service {
	if m != nil {
		return m.Service
	}
	return nil
}

// A Service is a service that compass is managing a namerd dentry for
type Service struct {
	// Id - the primary key - but not used for upserts
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// The logical name, e.g HTTP/1.1 Host name or HTTP/2 :authority
	LogicalName string `protobuf:"bytes,2,opt,name=logical_name,json=logicalName" json:"logical_name,omitempty"`
	// The namerd namespace the service should be managed within
	Namespace string `protobuf:"bytes,3,opt,name=namespace" json:"namespace,omitempty"`
	// Optional description of the service
	Description string `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
}

func (m *Service) Reset()                    { *m = Service{} }
func (m *Service) String() string            { return proto.CompactTextString(m) }
func (*Service) ProtoMessage()               {}
func (*Service) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Service) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Service) GetLogicalName() string {
	if m != nil {
		return m.LogicalName
	}
	return ""
}

func (m *Service) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *Service) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func init() {
	proto.RegisterType((*PutServiceRequest)(nil), "compass.needle.v1.PutServiceRequest")
	proto.RegisterType((*PutServiceResponse)(nil), "compass.needle.v1.PutServiceResponse")
	proto.RegisterType((*Service)(nil), "compass.needle.v1.Service")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ServiceManager service

type ServiceManagerClient interface {
	// PutService upserts services to be managed
	PutService(ctx context.Context, in *PutServiceRequest, opts ...grpc.CallOption) (*PutServiceResponse, error)
}

type serviceManagerClient struct {
	cc *grpc.ClientConn
}

func NewServiceManagerClient(cc *grpc.ClientConn) ServiceManagerClient {
	return &serviceManagerClient{cc}
}

func (c *serviceManagerClient) PutService(ctx context.Context, in *PutServiceRequest, opts ...grpc.CallOption) (*PutServiceResponse, error) {
	out := new(PutServiceResponse)
	err := grpc.Invoke(ctx, "/compass.needle.v1.ServiceManager/PutService", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ServiceManager service

type ServiceManagerServer interface {
	// PutService upserts services to be managed
	PutService(context.Context, *PutServiceRequest) (*PutServiceResponse, error)
}

func RegisterServiceManagerServer(s *grpc.Server, srv ServiceManagerServer) {
	s.RegisterService(&_ServiceManager_serviceDesc, srv)
}

func _ServiceManager_PutService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceManagerServer).PutService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/compass.needle.v1.ServiceManager/PutService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceManagerServer).PutService(ctx, req.(*PutServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ServiceManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "compass.needle.v1.ServiceManager",
	HandlerType: (*ServiceManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PutService",
			Handler:    _ServiceManager_PutService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/needle/v1/needle.proto",
}

func init() { proto.RegisterFile("proto/needle/v1/needle.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 249 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x91, 0x41, 0x4b, 0x03, 0x31,
	0x10, 0x85, 0xed, 0x2a, 0x96, 0xce, 0x4a, 0xb1, 0x73, 0x5a, 0x4a, 0x0f, 0x75, 0x51, 0xf0, 0xb4,
	0xa5, 0xd5, 0x9b, 0x37, 0x6f, 0x0a, 0x8a, 0xd4, 0x9b, 0x1e, 0x24, 0x66, 0x87, 0x12, 0xd8, 0x4d,
	0x62, 0x26, 0xdd, 0x93, 0x3f, 0x5e, 0x4c, 0x52, 0x5b, 0xa8, 0x20, 0x78, 0x1b, 0xbe, 0x37, 0x6f,
	0x86, 0x99, 0x07, 0x13, 0xeb, 0x8c, 0x37, 0x33, 0x4d, 0x54, 0x37, 0x34, 0xeb, 0xe6, 0xa9, 0xaa,
	0x02, 0xc6, 0x91, 0x34, 0xad, 0x15, 0xcc, 0x55, 0xa2, 0xdd, 0xbc, 0xbc, 0x83, 0xd1, 0xd3, 0xda,
	0x3f, 0x93, 0xeb, 0x94, 0xa4, 0x25, 0x7d, 0xac, 0x89, 0x3d, 0x5e, 0x43, 0x9f, 0x23, 0x29, 0x7a,
	0xd3, 0xde, 0x65, 0xbe, 0x18, 0x57, 0x7b, 0xce, 0x6a, 0xe3, 0xd9, 0xb4, 0x96, 0xf7, 0x80, 0xbb,
	0xa3, 0xd8, 0x1a, 0xcd, 0xf4, 0xcf, 0x59, 0x9f, 0xd0, 0x4f, 0x0c, 0x87, 0x90, 0xa9, 0x3a, 0x78,
	0x07, 0xcb, 0x4c, 0xd5, 0x78, 0x06, 0x27, 0x8d, 0x59, 0x29, 0x29, 0x9a, 0x37, 0x2d, 0x5a, 0x2a,
	0xb2, 0xa0, 0xe4, 0x89, 0x3d, 0x8a, 0x96, 0x70, 0x02, 0x83, 0x6f, 0x89, 0xad, 0x90, 0x54, 0x1c,
	0x06, 0x7d, 0x0b, 0x70, 0x0a, 0x79, 0x4d, 0x2c, 0x9d, 0xb2, 0x5e, 0x19, 0x5d, 0x1c, 0x45, 0xff,
	0x0e, 0x5a, 0xb4, 0x30, 0x4c, 0xdb, 0x1f, 0x84, 0x16, 0x2b, 0x72, 0xf8, 0x0a, 0xb0, 0xbd, 0x0d,
	0xcf, 0x7f, 0x39, 0x61, 0xef, 0x8b, 0xe3, 0x8b, 0x3f, 0xba, 0xe2, 0x83, 0xca, 0x83, 0x5b, 0x7c,
	0x39, 0xfd, 0x09, 0xec, 0x26, 0x56, 0xef, 0xc7, 0x21, 0xb1, 0xab, 0xaf, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x4d, 0x0d, 0xda, 0x0c, 0xd1, 0x01, 0x00, 0x00,
}
