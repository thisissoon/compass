// Code generated by protoc-gen-go. DO NOT EDIT.
// source: services/needle.proto

/*
Package services is a generated protocol buffer package.

It is generated from these files:
	services/needle.proto

It has these top-level messages:
	Service
	DelegationTable
	Dentry
	PutServiceRequest
	PutServiceResponse
	PutDentryRequest
	PutDentryResponse
	RouteToVersionRequest
	RouteToVersionResponse
	DeleteDentryByIdRequest
	DeleteDentryByIdResponse
	DeleteDentryByPrefixRequest
	DeleteDentryByPrefixResponse
	DelegationTablesRequest
	DelegationTablesResponse
	DentriesRequest
	DentriesResponse
*/
package services

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// A Service is a service that compass is managing a namerd dentry for
type Service struct {
	// Id - the primary key - but not used for upserts
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// User created date
	CreateDate *google_protobuf.Timestamp `protobuf:"bytes,2,opt,name=create_date,json=createDate" json:"create_date,omitempty"`
	// User updated date
	UpdateDate *google_protobuf.Timestamp `protobuf:"bytes,3,opt,name=update_date,json=updateDate" json:"update_date,omitempty"`
	// The logical name, e.g HTTP/1.1 Host name or HTTP/2 :authority
	LogicalName string `protobuf:"bytes,4,opt,name=logical_name,json=logicalName" json:"logical_name,omitempty"`
	// The kubernetets namespace the app runs in
	Namespace string `protobuf:"bytes,5,opt,name=namespace" json:"namespace,omitempty"`
	// Optional description of the service
	Description string `protobuf:"bytes,6,opt,name=description" json:"description,omitempty"`
}

func (m *Service) Reset()                    { *m = Service{} }
func (m *Service) String() string            { return proto.CompactTextString(m) }
func (*Service) ProtoMessage()               {}
func (*Service) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Service) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Service) GetCreateDate() *google_protobuf.Timestamp {
	if m != nil {
		return m.CreateDate
	}
	return nil
}

func (m *Service) GetUpdateDate() *google_protobuf.Timestamp {
	if m != nil {
		return m.UpdateDate
	}
	return nil
}

func (m *Service) GetLogicalName() string {
	if m != nil {
		return m.LogicalName
	}
	return ""
}

func (m *Service) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *Service) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

// A DelegationTable holds any number of dentries
type DelegationTable struct {
	// Name of the delegation table
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *DelegationTable) Reset()                    { *m = DelegationTable{} }
func (m *DelegationTable) String() string            { return proto.CompactTextString(m) }
func (*DelegationTable) ProtoMessage()               {}
func (*DelegationTable) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *DelegationTable) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// A Dentry is a single Delegation Table Rule
type Dentry struct {
	// Id - the primary key - but not used for upserts
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Optional description of the service
	ServiceId string `protobuf:"bytes,2,opt,name=service_id,json=serviceId" json:"service_id,omitempty"`
	// User created date
	CreateDate *google_protobuf.Timestamp `protobuf:"bytes,3,opt,name=create_date,json=createDate" json:"create_date,omitempty"`
	// User updated date
	UpdateDate *google_protobuf.Timestamp `protobuf:"bytes,4,opt,name=update_date,json=updateDate" json:"update_date,omitempty"`
	// The prefix to match on
	Prefix string `protobuf:"bytes,5,opt,name=prefix" json:"prefix,omitempty"`
	// The destination of the matched prefix
	Destination string `protobuf:"bytes,6,opt,name=destination" json:"destination,omitempty"`
	// The dentry dtab (k8s namespace)
	Dtab string `protobuf:"bytes,7,opt,name=dtab" json:"dtab,omitempty"`
	// Prioity of the dentry - affects the ordering within the delegation table
	Priority int32 `protobuf:"varint,8,opt,name=priority" json:"priority,omitempty"`
}

func (m *Dentry) Reset()                    { *m = Dentry{} }
func (m *Dentry) String() string            { return proto.CompactTextString(m) }
func (*Dentry) ProtoMessage()               {}
func (*Dentry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Dentry) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Dentry) GetServiceId() string {
	if m != nil {
		return m.ServiceId
	}
	return ""
}

func (m *Dentry) GetCreateDate() *google_protobuf.Timestamp {
	if m != nil {
		return m.CreateDate
	}
	return nil
}

func (m *Dentry) GetUpdateDate() *google_protobuf.Timestamp {
	if m != nil {
		return m.UpdateDate
	}
	return nil
}

func (m *Dentry) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

func (m *Dentry) GetDestination() string {
	if m != nil {
		return m.Destination
	}
	return ""
}

func (m *Dentry) GetDtab() string {
	if m != nil {
		return m.Dtab
	}
	return ""
}

func (m *Dentry) GetPriority() int32 {
	if m != nil {
		return m.Priority
	}
	return 0
}

// Request for [PutService](compass.needle.v1.NeedleService.PutService)
type PutServiceRequest struct {
	// Service to be created or updated
	Service *Service `protobuf:"bytes,1,opt,name=service" json:"service,omitempty"`
}

func (m *PutServiceRequest) Reset()                    { *m = PutServiceRequest{} }
func (m *PutServiceRequest) String() string            { return proto.CompactTextString(m) }
func (*PutServiceRequest) ProtoMessage()               {}
func (*PutServiceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *PutServiceRequest) GetService() *Service {
	if m != nil {
		return m.Service
	}
	return nil
}

// Response for [PutService](compass.needle.v1.NeedleService.PutService)
type PutServiceResponse struct {
	// Service crated or updated
	Service *Service `protobuf:"bytes,1,opt,name=service" json:"service,omitempty"`
}

func (m *PutServiceResponse) Reset()                    { *m = PutServiceResponse{} }
func (m *PutServiceResponse) String() string            { return proto.CompactTextString(m) }
func (*PutServiceResponse) ProtoMessage()               {}
func (*PutServiceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *PutServiceResponse) GetService() *Service {
	if m != nil {
		return m.Service
	}
	return nil
}

// Request for [PutDentry](compass.needle.v1.NeedleService.PutDentry)
type PutDentryRequest struct {
	// Dentry to create or update
	Dentry *Dentry `protobuf:"bytes,1,opt,name=dentry" json:"dentry,omitempty"`
}

func (m *PutDentryRequest) Reset()                    { *m = PutDentryRequest{} }
func (m *PutDentryRequest) String() string            { return proto.CompactTextString(m) }
func (*PutDentryRequest) ProtoMessage()               {}
func (*PutDentryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *PutDentryRequest) GetDentry() *Dentry {
	if m != nil {
		return m.Dentry
	}
	return nil
}

// Response for [PutDentry](compass.needle.v1.NeedleService.PutDentry)
type PutDentryResponse struct {
	// Dentry crated or updated
	Dentry *Dentry `protobuf:"bytes,1,opt,name=dentry" json:"dentry,omitempty"`
}

func (m *PutDentryResponse) Reset()                    { *m = PutDentryResponse{} }
func (m *PutDentryResponse) String() string            { return proto.CompactTextString(m) }
func (*PutDentryResponse) ProtoMessage()               {}
func (*PutDentryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *PutDentryResponse) GetDentry() *Dentry {
	if m != nil {
		return m.Dentry
	}
	return nil
}

// Request for [RouteToVersion](compass.needle.v1.NeedleService.RouteToVersion)
type RouteToVersionRequest struct {
	// Logical name of the service to route
	LogicalName string `protobuf:"bytes,1,opt,name=logical_name,json=logicalName" json:"logical_name,omitempty"`
	// Version string of the kubernetets service to route too
	Version string `protobuf:"bytes,3,opt,name=version" json:"version,omitempty"`
}

func (m *RouteToVersionRequest) Reset()                    { *m = RouteToVersionRequest{} }
func (m *RouteToVersionRequest) String() string            { return proto.CompactTextString(m) }
func (*RouteToVersionRequest) ProtoMessage()               {}
func (*RouteToVersionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *RouteToVersionRequest) GetLogicalName() string {
	if m != nil {
		return m.LogicalName
	}
	return ""
}

func (m *RouteToVersionRequest) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

// Response for [RouteToVersion](compass.needle.v1.NeedleService.RouteToVersion)
type RouteToVersionResponse struct {
}

func (m *RouteToVersionResponse) Reset()                    { *m = RouteToVersionResponse{} }
func (m *RouteToVersionResponse) String() string            { return proto.CompactTextString(m) }
func (*RouteToVersionResponse) ProtoMessage()               {}
func (*RouteToVersionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

// Request for [DeleteDentryById](compass.needle.v1.NeedleService.DeleteDentryById)
type DeleteDentryByIdRequest struct {
	// Id of the dentry to delete
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *DeleteDentryByIdRequest) Reset()                    { *m = DeleteDentryByIdRequest{} }
func (m *DeleteDentryByIdRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteDentryByIdRequest) ProtoMessage()               {}
func (*DeleteDentryByIdRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *DeleteDentryByIdRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// Response for [DeleteDentryById](compass.needle.v1.NeedleService.DeleteDentryById)
type DeleteDentryByIdResponse struct {
	// Indicates if the dentry was deleted
	Deleted bool `protobuf:"varint,1,opt,name=deleted" json:"deleted,omitempty"`
}

func (m *DeleteDentryByIdResponse) Reset()                    { *m = DeleteDentryByIdResponse{} }
func (m *DeleteDentryByIdResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteDentryByIdResponse) ProtoMessage()               {}
func (*DeleteDentryByIdResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *DeleteDentryByIdResponse) GetDeleted() bool {
	if m != nil {
		return m.Deleted
	}
	return false
}

// Request for [DeleteDentryByPrefix](compass.needle.v1.NeedleService.DeleteDentryByPrefix)
type DeleteDentryByPrefixRequest struct {
	// Deletegation table the dentry is in
	Dtab string `protobuf:"bytes,1,opt,name=dtab" json:"dtab,omitempty"`
	// The dentry predfix
	Prefix string `protobuf:"bytes,2,opt,name=prefix" json:"prefix,omitempty"`
}

func (m *DeleteDentryByPrefixRequest) Reset()                    { *m = DeleteDentryByPrefixRequest{} }
func (m *DeleteDentryByPrefixRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteDentryByPrefixRequest) ProtoMessage()               {}
func (*DeleteDentryByPrefixRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *DeleteDentryByPrefixRequest) GetDtab() string {
	if m != nil {
		return m.Dtab
	}
	return ""
}

func (m *DeleteDentryByPrefixRequest) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

// Response for [DeleteDentryByPrefix](compass.needle.v1.NeedleService.DeleteDentryByPrefix)
type DeleteDentryByPrefixResponse struct {
	// Indicates if the dentry was deleted
	Deleted bool `protobuf:"varint,1,opt,name=deleted" json:"deleted,omitempty"`
}

func (m *DeleteDentryByPrefixResponse) Reset()                    { *m = DeleteDentryByPrefixResponse{} }
func (m *DeleteDentryByPrefixResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteDentryByPrefixResponse) ProtoMessage()               {}
func (*DeleteDentryByPrefixResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *DeleteDentryByPrefixResponse) GetDeleted() bool {
	if m != nil {
		return m.Deleted
	}
	return false
}

// Request for [DelegationTables](compass.needle.v1.NeedleService.DelegationTables)
type DelegationTablesRequest struct {
}

func (m *DelegationTablesRequest) Reset()                    { *m = DelegationTablesRequest{} }
func (m *DelegationTablesRequest) String() string            { return proto.CompactTextString(m) }
func (*DelegationTablesRequest) ProtoMessage()               {}
func (*DelegationTablesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

// Response for [DelegationTables](compass.needle.v1.NeedleService.DelegationTables)
type DelegationTablesResponse struct {
	// Delegation tables
	DelegationTables []*DelegationTable `protobuf:"bytes,1,rep,name=delegation_tables,json=delegationTables" json:"delegation_tables,omitempty"`
}

func (m *DelegationTablesResponse) Reset()                    { *m = DelegationTablesResponse{} }
func (m *DelegationTablesResponse) String() string            { return proto.CompactTextString(m) }
func (*DelegationTablesResponse) ProtoMessage()               {}
func (*DelegationTablesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *DelegationTablesResponse) GetDelegationTables() []*DelegationTable {
	if m != nil {
		return m.DelegationTables
	}
	return nil
}

// Request for [Dentries](compass.needle.v1.NeedleService.Dentries)
type DentriesRequest struct {
	// Delegation Tables to get Dentries for
	Dtab string `protobuf:"bytes,1,opt,name=dtab" json:"dtab,omitempty"`
}

func (m *DentriesRequest) Reset()                    { *m = DentriesRequest{} }
func (m *DentriesRequest) String() string            { return proto.CompactTextString(m) }
func (*DentriesRequest) ProtoMessage()               {}
func (*DentriesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *DentriesRequest) GetDtab() string {
	if m != nil {
		return m.Dtab
	}
	return ""
}

// Response for [DelegationTables](compass.needle.v1.NeedleService.DelegationTables)
type DentriesResponse struct {
	// Dentries in the delegation table
	Dentries []*Dentry `protobuf:"bytes,1,rep,name=dentries" json:"dentries,omitempty"`
}

func (m *DentriesResponse) Reset()                    { *m = DentriesResponse{} }
func (m *DentriesResponse) String() string            { return proto.CompactTextString(m) }
func (*DentriesResponse) ProtoMessage()               {}
func (*DentriesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *DentriesResponse) GetDentries() []*Dentry {
	if m != nil {
		return m.Dentries
	}
	return nil
}

func init() {
	proto.RegisterType((*Service)(nil), "services.needle.Service")
	proto.RegisterType((*DelegationTable)(nil), "services.needle.DelegationTable")
	proto.RegisterType((*Dentry)(nil), "services.needle.Dentry")
	proto.RegisterType((*PutServiceRequest)(nil), "services.needle.PutServiceRequest")
	proto.RegisterType((*PutServiceResponse)(nil), "services.needle.PutServiceResponse")
	proto.RegisterType((*PutDentryRequest)(nil), "services.needle.PutDentryRequest")
	proto.RegisterType((*PutDentryResponse)(nil), "services.needle.PutDentryResponse")
	proto.RegisterType((*RouteToVersionRequest)(nil), "services.needle.RouteToVersionRequest")
	proto.RegisterType((*RouteToVersionResponse)(nil), "services.needle.RouteToVersionResponse")
	proto.RegisterType((*DeleteDentryByIdRequest)(nil), "services.needle.DeleteDentryByIdRequest")
	proto.RegisterType((*DeleteDentryByIdResponse)(nil), "services.needle.DeleteDentryByIdResponse")
	proto.RegisterType((*DeleteDentryByPrefixRequest)(nil), "services.needle.DeleteDentryByPrefixRequest")
	proto.RegisterType((*DeleteDentryByPrefixResponse)(nil), "services.needle.DeleteDentryByPrefixResponse")
	proto.RegisterType((*DelegationTablesRequest)(nil), "services.needle.DelegationTablesRequest")
	proto.RegisterType((*DelegationTablesResponse)(nil), "services.needle.DelegationTablesResponse")
	proto.RegisterType((*DentriesRequest)(nil), "services.needle.DentriesRequest")
	proto.RegisterType((*DentriesResponse)(nil), "services.needle.DentriesResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DentryService service

type DentryServiceClient interface {
	// PutService upserts services to be managed
	PutService(ctx context.Context, in *PutServiceRequest, opts ...grpc.CallOption) (*PutServiceResponse, error)
	// DelegationTables returns a list of delegation tables we are managing
	DelegationTables(ctx context.Context, in *DelegationTablesRequest, opts ...grpc.CallOption) (*DelegationTablesResponse, error)
	// Dentries returns for a dtab
	Dentries(ctx context.Context, in *DentriesRequest, opts ...grpc.CallOption) (*DentriesResponse, error)
	// PutDentry upserts dentries to be managed
	PutDentry(ctx context.Context, in *PutDentryRequest, opts ...grpc.CallOption) (*PutDentryResponse, error)
	// DeleteDentryById deletes a dentry by it's UUID
	DeleteDentryById(ctx context.Context, in *DeleteDentryByIdRequest, opts ...grpc.CallOption) (*DeleteDentryByIdResponse, error)
	// DeleteDentryByPrefix deletes a dentry by prefix within a dtab
	DeleteDentryByPrefix(ctx context.Context, in *DeleteDentryByPrefixRequest, opts ...grpc.CallOption) (*DeleteDentryByPrefixResponse, error)
	// RouteToVersion routes a specific logical name to a specifc lubernetets services
	// based on a services logicalName and version labels
	RouteToVersion(ctx context.Context, in *RouteToVersionRequest, opts ...grpc.CallOption) (*RouteToVersionResponse, error)
}

type dentryServiceClient struct {
	cc *grpc.ClientConn
}

func NewDentryServiceClient(cc *grpc.ClientConn) DentryServiceClient {
	return &dentryServiceClient{cc}
}

func (c *dentryServiceClient) PutService(ctx context.Context, in *PutServiceRequest, opts ...grpc.CallOption) (*PutServiceResponse, error) {
	out := new(PutServiceResponse)
	err := grpc.Invoke(ctx, "/services.needle.DentryService/PutService", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dentryServiceClient) DelegationTables(ctx context.Context, in *DelegationTablesRequest, opts ...grpc.CallOption) (*DelegationTablesResponse, error) {
	out := new(DelegationTablesResponse)
	err := grpc.Invoke(ctx, "/services.needle.DentryService/DelegationTables", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dentryServiceClient) Dentries(ctx context.Context, in *DentriesRequest, opts ...grpc.CallOption) (*DentriesResponse, error) {
	out := new(DentriesResponse)
	err := grpc.Invoke(ctx, "/services.needle.DentryService/Dentries", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dentryServiceClient) PutDentry(ctx context.Context, in *PutDentryRequest, opts ...grpc.CallOption) (*PutDentryResponse, error) {
	out := new(PutDentryResponse)
	err := grpc.Invoke(ctx, "/services.needle.DentryService/PutDentry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dentryServiceClient) DeleteDentryById(ctx context.Context, in *DeleteDentryByIdRequest, opts ...grpc.CallOption) (*DeleteDentryByIdResponse, error) {
	out := new(DeleteDentryByIdResponse)
	err := grpc.Invoke(ctx, "/services.needle.DentryService/DeleteDentryById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dentryServiceClient) DeleteDentryByPrefix(ctx context.Context, in *DeleteDentryByPrefixRequest, opts ...grpc.CallOption) (*DeleteDentryByPrefixResponse, error) {
	out := new(DeleteDentryByPrefixResponse)
	err := grpc.Invoke(ctx, "/services.needle.DentryService/DeleteDentryByPrefix", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dentryServiceClient) RouteToVersion(ctx context.Context, in *RouteToVersionRequest, opts ...grpc.CallOption) (*RouteToVersionResponse, error) {
	out := new(RouteToVersionResponse)
	err := grpc.Invoke(ctx, "/services.needle.DentryService/RouteToVersion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DentryService service

type DentryServiceServer interface {
	// PutService upserts services to be managed
	PutService(context.Context, *PutServiceRequest) (*PutServiceResponse, error)
	// DelegationTables returns a list of delegation tables we are managing
	DelegationTables(context.Context, *DelegationTablesRequest) (*DelegationTablesResponse, error)
	// Dentries returns for a dtab
	Dentries(context.Context, *DentriesRequest) (*DentriesResponse, error)
	// PutDentry upserts dentries to be managed
	PutDentry(context.Context, *PutDentryRequest) (*PutDentryResponse, error)
	// DeleteDentryById deletes a dentry by it's UUID
	DeleteDentryById(context.Context, *DeleteDentryByIdRequest) (*DeleteDentryByIdResponse, error)
	// DeleteDentryByPrefix deletes a dentry by prefix within a dtab
	DeleteDentryByPrefix(context.Context, *DeleteDentryByPrefixRequest) (*DeleteDentryByPrefixResponse, error)
	// RouteToVersion routes a specific logical name to a specifc lubernetets services
	// based on a services logicalName and version labels
	RouteToVersion(context.Context, *RouteToVersionRequest) (*RouteToVersionResponse, error)
}

func RegisterDentryServiceServer(s *grpc.Server, srv DentryServiceServer) {
	s.RegisterService(&_DentryService_serviceDesc, srv)
}

func _DentryService_PutService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DentryServiceServer).PutService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.needle.DentryService/PutService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DentryServiceServer).PutService(ctx, req.(*PutServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DentryService_DelegationTables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelegationTablesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DentryServiceServer).DelegationTables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.needle.DentryService/DelegationTables",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DentryServiceServer).DelegationTables(ctx, req.(*DelegationTablesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DentryService_Dentries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DentriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DentryServiceServer).Dentries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.needle.DentryService/Dentries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DentryServiceServer).Dentries(ctx, req.(*DentriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DentryService_PutDentry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutDentryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DentryServiceServer).PutDentry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.needle.DentryService/PutDentry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DentryServiceServer).PutDentry(ctx, req.(*PutDentryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DentryService_DeleteDentryById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDentryByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DentryServiceServer).DeleteDentryById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.needle.DentryService/DeleteDentryById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DentryServiceServer).DeleteDentryById(ctx, req.(*DeleteDentryByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DentryService_DeleteDentryByPrefix_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDentryByPrefixRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DentryServiceServer).DeleteDentryByPrefix(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.needle.DentryService/DeleteDentryByPrefix",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DentryServiceServer).DeleteDentryByPrefix(ctx, req.(*DeleteDentryByPrefixRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DentryService_RouteToVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RouteToVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DentryServiceServer).RouteToVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.needle.DentryService/RouteToVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DentryServiceServer).RouteToVersion(ctx, req.(*RouteToVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DentryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "services.needle.DentryService",
	HandlerType: (*DentryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PutService",
			Handler:    _DentryService_PutService_Handler,
		},
		{
			MethodName: "DelegationTables",
			Handler:    _DentryService_DelegationTables_Handler,
		},
		{
			MethodName: "Dentries",
			Handler:    _DentryService_Dentries_Handler,
		},
		{
			MethodName: "PutDentry",
			Handler:    _DentryService_PutDentry_Handler,
		},
		{
			MethodName: "DeleteDentryById",
			Handler:    _DentryService_DeleteDentryById_Handler,
		},
		{
			MethodName: "DeleteDentryByPrefix",
			Handler:    _DentryService_DeleteDentryByPrefix_Handler,
		},
		{
			MethodName: "RouteToVersion",
			Handler:    _DentryService_RouteToVersion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/needle.proto",
}

func init() { proto.RegisterFile("services/needle.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 717 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0x5b, 0x6f, 0xd3, 0x4c,
	0x10, 0xad, 0xd3, 0x36, 0x97, 0xc9, 0xf7, 0xf5, 0xb2, 0xa2, 0xed, 0x62, 0x8a, 0x48, 0x17, 0x01,
	0xa9, 0x04, 0x8e, 0x94, 0xf2, 0x80, 0xc4, 0x5b, 0x89, 0x54, 0xfa, 0x00, 0x2a, 0x26, 0x02, 0x89,
	0x97, 0xc8, 0xc9, 0x6e, 0xa3, 0x95, 0x12, 0xdb, 0xd8, 0xeb, 0x8a, 0xfe, 0x16, 0x7e, 0x0e, 0xff,
	0x89, 0x67, 0xe4, 0xbd, 0x38, 0xf1, 0xa5, 0x4d, 0x0b, 0x6f, 0xd9, 0xd9, 0x33, 0x67, 0x66, 0x8e,
	0xcf, 0x6c, 0x60, 0x2f, 0x66, 0xd1, 0x15, 0x9f, 0xb0, 0xb8, 0xe7, 0x33, 0x46, 0x67, 0xcc, 0x09,
	0xa3, 0x40, 0x04, 0x68, 0xdb, 0x84, 0x1d, 0x15, 0xb6, 0x9f, 0x4c, 0x83, 0x60, 0x3a, 0x63, 0x3d,
	0x79, 0x3d, 0x4e, 0x2e, 0x7b, 0x82, 0xcf, 0x59, 0x2c, 0xbc, 0x79, 0xa8, 0x32, 0xc8, 0x6f, 0x0b,
	0x1a, 0x9f, 0x55, 0x12, 0xda, 0x82, 0x1a, 0xa7, 0xd8, 0xea, 0x58, 0xdd, 0x96, 0x5b, 0xe3, 0x14,
	0xbd, 0x85, 0xf6, 0x24, 0x62, 0x9e, 0x60, 0x23, 0xea, 0x09, 0x86, 0x6b, 0x1d, 0xab, 0xdb, 0xee,
	0xdb, 0x8e, 0xa2, 0x74, 0x0c, 0xa5, 0x33, 0x34, 0x94, 0x2e, 0x28, 0xf8, 0xc0, 0x13, 0x2c, 0x4d,
	0x4e, 0x42, 0x9a, 0x25, 0xaf, 0xaf, 0x4e, 0x56, 0x70, 0x99, 0x7c, 0x04, 0xff, 0xcd, 0x82, 0x29,
	0x9f, 0x78, 0xb3, 0x91, 0xef, 0xcd, 0x19, 0xde, 0x90, 0x3d, 0xb5, 0x75, 0xec, 0xa3, 0x37, 0x67,
	0xe8, 0x10, 0x5a, 0xe9, 0x55, 0x1c, 0x7a, 0x13, 0x86, 0x37, 0xe5, 0xfd, 0x22, 0x80, 0x3a, 0xd0,
	0xa6, 0x2c, 0x9e, 0x44, 0x3c, 0x14, 0x3c, 0xf0, 0x71, 0x5d, 0xe5, 0x2f, 0x85, 0xc8, 0x33, 0xd8,
	0x1e, 0xb0, 0x19, 0x9b, 0x7a, 0xe9, 0x69, 0xe8, 0x8d, 0x67, 0x0c, 0x21, 0xd8, 0x90, 0xd5, 0x94,
	0x02, 0xf2, 0x37, 0xf9, 0x59, 0x83, 0xfa, 0x80, 0xf9, 0x22, 0xba, 0x2e, 0xc9, 0xf3, 0x18, 0x40,
	0xcb, 0x3d, 0xe2, 0x54, 0xaa, 0xd3, 0x72, 0x5b, 0x3a, 0x72, 0x5e, 0x52, 0x6f, 0xfd, 0x5f, 0xd4,
	0xdb, 0xb8, 0x97, 0x7a, 0xfb, 0x50, 0x0f, 0x23, 0x76, 0xc9, 0x7f, 0x68, 0x5d, 0xf4, 0x49, 0x8b,
	0x22, 0xb8, 0xef, 0x15, 0x44, 0x31, 0xa1, 0x54, 0x01, 0x2a, 0xbc, 0x31, 0x6e, 0x28, 0x05, 0xd2,
	0xdf, 0xc8, 0x86, 0x66, 0x18, 0xf1, 0x20, 0xe2, 0xe2, 0x1a, 0x37, 0x3b, 0x56, 0x77, 0xd3, 0xcd,
	0xce, 0xe4, 0x0c, 0x76, 0x2f, 0x12, 0xa1, 0xfd, 0xe3, 0xb2, 0xef, 0x09, 0x8b, 0x05, 0xea, 0x43,
	0x43, 0xab, 0x20, 0xc5, 0x6a, 0xf7, 0xb1, 0x53, 0xb0, 0xa5, 0x63, 0x32, 0x0c, 0x90, 0xbc, 0x07,
	0xb4, 0x4c, 0x14, 0x87, 0x81, 0x1f, 0xb3, 0xbf, 0x62, 0x7a, 0x07, 0x3b, 0x17, 0x89, 0x50, 0x9f,
	0xcc, 0x74, 0xd4, 0x83, 0x3a, 0x95, 0x01, 0x4d, 0x73, 0x50, 0xa2, 0xd1, 0x78, 0x0d, 0x23, 0x03,
	0x39, 0x97, 0x21, 0xd1, 0xdd, 0xdc, 0x9b, 0x65, 0x08, 0x7b, 0x6e, 0x90, 0x08, 0x36, 0x0c, 0xbe,
	0xb0, 0x28, 0xe6, 0x81, 0x6f, 0xfa, 0x29, 0xda, 0xdb, 0x2a, 0xdb, 0x1b, 0x43, 0xe3, 0x4a, 0x25,
	0x49, 0xe7, 0xb4, 0x5c, 0x73, 0x24, 0x18, 0xf6, 0x8b, 0xac, 0xaa, 0x41, 0x72, 0x0c, 0x07, 0xa9,
	0xa5, 0x05, 0x53, 0x7d, 0x9c, 0x5e, 0x9f, 0x53, 0x53, 0xb1, 0xe0, 0x5d, 0xf2, 0x1a, 0x70, 0x19,
	0xaa, 0xe7, 0xc4, 0xd0, 0xa0, 0xf2, 0x4e, 0x25, 0x34, 0x5d, 0x73, 0x24, 0xe7, 0xf0, 0x28, 0x9f,
	0x75, 0x21, 0x8d, 0x65, 0x8a, 0x18, 0xf7, 0x58, 0x4b, 0xee, 0x59, 0x78, 0xb1, 0xb6, 0xec, 0x45,
	0xf2, 0x06, 0x0e, 0xab, 0xa9, 0x56, 0x36, 0xf1, 0x50, 0x4d, 0xb9, 0xb4, 0xb8, 0xb1, 0x6e, 0x80,
	0x70, 0x35, 0x55, 0xfe, 0x4a, 0x13, 0x7e, 0x80, 0x5d, 0x9a, 0xdd, 0x8d, 0x84, 0xbc, 0xc4, 0x56,
	0x67, 0xbd, 0xdb, 0xee, 0x77, 0x2a, 0x3e, 0x64, 0x8e, 0xc5, 0xdd, 0xa1, 0x05, 0x5a, 0xf5, 0x7c,
	0xf8, 0x22, 0xe2, 0x59, 0xf5, 0xaa, 0xf1, 0xc9, 0x19, 0xec, 0x2c, 0x60, 0xba, 0x93, 0x13, 0x68,
	0x52, 0x1d, 0xd3, 0x0d, 0xdc, 0xe8, 0xa4, 0x0c, 0xd8, 0xff, 0xb5, 0x09, 0xff, 0xab, 0xa0, 0x79,
	0xad, 0xbf, 0x02, 0x2c, 0x56, 0x06, 0x91, 0x12, 0x45, 0x69, 0x31, 0xed, 0xa7, 0xb7, 0x62, 0xb4,
	0x89, 0xd6, 0x10, 0x4f, 0x7b, 0xce, 0x8f, 0x8b, 0xba, 0xab, 0x24, 0x32, 0x2a, 0xd8, 0xc7, 0x77,
	0x40, 0x66, 0xa5, 0x3e, 0x41, 0xd3, 0xc8, 0x83, 0x3a, 0xd5, 0x22, 0x2c, 0x04, 0xb6, 0x8f, 0x6e,
	0x41, 0x64, 0x94, 0x43, 0x68, 0x65, 0xab, 0x8b, 0x8e, 0xaa, 0x26, 0xce, 0xbd, 0x0d, 0x36, 0xb9,
	0x0d, 0x52, 0xd4, 0x64, 0x79, 0x5f, 0x6e, 0xd0, 0xa4, 0x62, 0xfb, 0x6e, 0xd0, 0xa4, 0x6a, 0xf9,
	0xc8, 0x1a, 0x4a, 0xe0, 0x41, 0xd5, 0x66, 0xa0, 0x97, 0x2b, 0x48, 0x72, 0xbb, 0x68, 0xbf, 0xba,
	0x23, 0x3a, 0x2b, 0x3b, 0x81, 0xad, 0xfc, 0xb3, 0x82, 0x9e, 0x97, 0x28, 0x2a, 0x5f, 0x33, 0xfb,
	0xc5, 0x4a, 0x9c, 0x29, 0x72, 0x0a, 0xdf, 0x9a, 0x06, 0x3b, 0xae, 0xcb, 0x7f, 0xb1, 0x93, 0x3f,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x1f, 0xb6, 0xac, 0x47, 0xcb, 0x08, 0x00, 0x00,
}
